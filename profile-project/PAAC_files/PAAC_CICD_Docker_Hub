pipeline {
    agent any

    tools {
        maven "MAVEN3"
        jdk "OracleJDK17"
    }

    environment {
        registry = "yawgyamfiprem32/sprintboot-dock"
        registryCredential = 'dockerhub'
    }

    stages {
        stage('Fetch Code') {
            steps {
                git branch: 'CICD', url: 'https://github.com/NanaGyamfiPrempeh30/NGP-DEV.git'
            }
        }

        stage('Build') {
            steps {
                dir('profile-project') {
                    sh 'mvn clean install -DskipTests'
                }
            }
             post {
        success {
            // make the .war available for later stages
            sh '''
              mkdir -p $WORKSPACE/target
              WAR_FILE=$(ls profile-project/target/*.war | head -n1)
              cp "$WAR_FILE" target/vprofile.war
            '''
            archiveArtifacts artifacts: 'profile-project/**/target/*.war'
                }
            }
        }

        stage('UNIT Test') {
            steps {
                dir('profile-project') {
                    sh 'mvn test'
                }
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                dir('profile-project') {
                    sh 'mvn checkstyle:checkstyle'
                }
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar6.1'
            }
            steps {
                dir('profile-project') {
                    withSonarQubeEnv('sonar') {
                        sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
-Dsonar.projectName=vprofile \
-Dsonar.projectVersion=1.0 \
-Dsonar.sources=src/ \
-Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
-Dsonar.junit.reportsPath=target/surefire-reports/ \
-Dsonar.jacoco.reportsPath=target/jacoco.exec \
-Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                    }
                }
            }
        }

   stage('Prepare Docker Context') {        // new stage, after Build
    steps {
        // no-op now, file is already placed in target/
        sh 'ls -l target/vprofile.war'   // sanity check
    }
}

        stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build registry + ":V$BUILD_NUMBER"
                }
            }
        }

        stage('Upload Image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push("V$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage('Remove Unused docker image') {
            steps {
                sh "docker rmi $registry:V$BUILD_NUMBER"
            }
        }
    }
}
